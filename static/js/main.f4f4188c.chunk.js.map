{"version":3,"sources":["Title.js","SearchUser.js","Results.js","Content.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","Header","as","SearchUser","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this","react","Input","focus","placeholder","value","userIdProp","onChange","event","handleChangeProp","Button","onClick","handleSearchProp","handleListProp","Component","ListItem","Table","Row","Cell","first_name","last_name","ListUsers","users","map","user","index","key","id","Results","singleResult","multipleResults","undefined","stateProp","results","Item","Group","Image","size","src","avatar","Content","verticalAlign","ItemGroup","allResults","length","fixed","HeaderCell","Body","Container","setStateHandlerChange","userId","setState","setStateHandlerSearch","setStateHandlerList","handleChange","console","log","target","handleSearch","state","fetch","then","data","json","catch","error","alert","handleList","_this2","src_SearchUser","Divider","horizontal","Icon","name","src_Results","App","src_Title","src_Content","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f4f4188c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Header } from 'semantic-ui-react'\r\n\r\n// class Title extends Component {\r\n//   render() {\r\n//     return (\r\n//         <Header as='h1'>APP : test-app-1</Header>\r\n//     );\r\n//   }\r\n// }\r\n\r\nconst Title = () => (\r\n  <Header as='h1'>APP : test-app-1</Header>\r\n)\r\nexport default Title;","import React, { Component, Fragment } from 'react';\r\nimport { Input } from 'semantic-ui-react'\r\nimport { Button } from 'semantic-ui-react'\r\n\r\nclass SearchUser extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // this.handleChange = this.handleChange.bind(this);\r\n    // this.handleSearch = this.handleSearch.bind(this);\r\n    // this.handleSearchAll = this.handleSearchAll.bind(this);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        {/* <Input focus placeholder='Type User ID...' value={this.props.stateProp.userId} onChange={this.handleChange} />\r\n        <Button onClick={this.handleSearch}>Search</Button>\r\n        <Button onClick={this.handleSearchAll}>Show all Users</Button> */}\r\n\r\n        <Input focus placeholder='Type User ID...' value={this.props.userIdProp} onChange={(event) => this.props.handleChangeProp(event)} />\r\n        <Button onClick={ () => this.props.handleSearchProp()}>Search</Button>\r\n        <Button onClick={() => this.props.handleListProp()}>Show all Users</Button>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\nexport default SearchUser;","/* eslint-disable max-len */\r\n\r\nimport React, { Component } from 'react';\r\nimport { Item, Table, Container, ItemGroup } from 'semantic-ui-react'\r\n\r\nfunction ListItem(props) {\r\n    // Correct! There is no need to specify the key here:\r\n    return (<Table.Row>\r\n        <Table.Cell>{props.value.first_name}</Table.Cell>\r\n        <Table.Cell>{props.value.last_name}</Table.Cell>\r\n    </Table.Row>\r\n    );\r\n}\r\n\r\nfunction ListUsers(props) {\r\n    const users = props.users;\r\n    const listUsers = users.map((user, index) =>\r\n        // Correct! Key should be specified inside the array.\r\n        <ListItem key={user.id}\r\n            value={user} />\r\n    );\r\n    return listUsers;\r\n}\r\n\r\nclass Results extends Component {\r\n\r\n    render() {\r\n\r\n        let singleResult;\r\n        let multipleResults;\r\n        if (this.props.stateProp.results !== undefined) {\r\n            singleResult =\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image size='tiny' src={this.props.stateProp.results.avatar} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='a'>{this.props.stateProp.results.first_name + \" \" + this.props.stateProp.results.last_name}</Item.Header>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>;\r\n        } else {\r\n            singleResult = <ItemGroup></ItemGroup>;\r\n        }\r\n\r\n        if (this.props.stateProp.allResults.length !== 0) {\r\n            multipleResults =\r\n                <Table fixed>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>First Name</Table.HeaderCell>\r\n                            <Table.HeaderCell>Last Name</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        <ListUsers users={this.props.stateProp.allResults} />\r\n                    </Table.Body>\r\n                </Table>;\r\n        } else {\r\n            multipleResults =\r\n                <Table></Table>;\r\n        }\r\n\r\n        return (\r\n            <Container>\r\n                {singleResult}\r\n\r\n                {multipleResults}\r\n            </Container>\r\n        );\r\n    }\r\n}\r\nexport default Results;","/* eslint-disable max-len */\r\n\r\nimport React, { Component } from 'react';\r\nimport { Divider, Container, Header, Icon } from 'semantic-ui-react'\r\nimport SearchUser from './SearchUser.js'\r\nimport Results from './Results.js'\r\n\r\nclass Content extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      userId: '',\r\n      results: undefined,\r\n      allResults: []\r\n    };\r\n\r\n    // this.setStateHandlerSearch = this.setStateHandlerSearch.bind(this);\r\n    // this.setStateHandlerList = this.setStateHandlerList.bind(this);\r\n  };\r\n\r\n  setStateHandlerChange = (userId) => {\r\n    this.setState({ userId: userId })\r\n  }\r\n\r\n  setStateHandlerSearch = (userId, results) => {\r\n    this.setState({ userId: userId, results: results });\r\n  }\r\n\r\n  setStateHandlerList = (allResults) => {\r\n    this.setState({ allResults: allResults });\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    console.log(\"Input value has been changed\")\r\n    this.setStateHandlerChange(event.target.value);\r\n  }\r\n\r\n  handleSearch = () => {\r\n    console.log(\"Search clicked - UserId: \" + this.state.userId);\r\n\r\n    fetch(\"https://reqres.in/api/users/\" + this.state.userId)\r\n      .then(data => data.json())\r\n      .then(results => {\r\n        this.setStateHandlerSearch(this.state.userId, results.data);\r\n      })\r\n      .catch(error => {\r\n        this.setStateHandlerSearch(this.state.userId, undefined);\r\n        alert(\"APIRest Error\");\r\n      });\r\n  }\r\n\r\n  handleList = () => {\r\n    console.log(\"Search clicked for all\");\r\n\r\n    fetch(\"https://reqres.in/api/users?page=2\")\r\n      .then(data => data.json())\r\n      .then(results => {\r\n        this.setStateHandlerList(results.data);\r\n      })\r\n      .catch(error => {\r\n        this.setStateHandlerList([]);\r\n        alert(\"APIRest Error\");\r\n      });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.handleList();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <p>\r\n          First React App:\r\n        </p>\r\n\r\n        <SearchUser userIdProp={this.state.userId}\r\n          handleChangeProp={(event) => this.handleChange(event)}\r\n          handleSearchProp={() => this.handleSearch()}\r\n          handleListProp={() => this.handleList()}\r\n        />\r\n\r\n        <Divider horizontal>\r\n          <Header as='h4'>\r\n            <Icon name='bar chart' />\r\n            Results\r\n          </Header>\r\n        </Divider>\r\n\r\n\r\n        <Results stateProp={this.state} />\r\n\r\n      </Container>\r\n    );\r\n  }\r\n\r\n}\r\nexport default Content;","import React, { Fragment } from 'react';\r\nimport './App.css';\r\nimport Title from './Title.js';\r\nimport Content from './Content.js';\r\n\r\n// class App extends Component {\r\n//   render() {\r\n//     return (\r\n//       <Fragment>\r\n//         <Title />\r\n//         <br />\r\n//         <Content />\r\n//       </Fragment>\r\n//     );\r\n//   }\r\n// }\r\n// export default App;\r\n\r\n\r\nconst App = () => (\r\n  <Fragment>\r\n    <Title />\r\n    <br />\r\n    <Content />\r\n  </Fragment>\r\n)\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}